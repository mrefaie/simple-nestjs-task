version: '3.8'

services:
  dev_migration:
    container_name: ${APP_NAME}_migrations_container
    env_file:
      - .env.dev
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    entrypoint:
      - /bin/bash
      - -c
      - 'npm run typeorm:migration:run'
    networks:
      - local-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: 'no'
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
  dev_app:
    container_name: ${APP_NAME}_app_container
    env_file:
      - .env.dev
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:debug
    ports:
      - ${APP_PORT_EXPOSED}:${APP_PORT}
    networks:
      - local-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      dev_migration:
        condition: service_started
  redis:
    container_name: ${APP_NAME}_redis_container
    image: redis:5
    networks:
      - local-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      timeout: 20s
      retries: 10
  mysql:
    container_name: ${APP_NAME}_mysql_container
    image: mysql:8.0.28
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - 3336:3306
    volumes:
      - /var/lib/mysql
    networks:
      - local-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
networks:
  local-network:
